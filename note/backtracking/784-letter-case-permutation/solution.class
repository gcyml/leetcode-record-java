class Solution {
    public List<String> letterCasePermutation(String S) {
        List<String> list = new ArrayList<>();
        backtracking(list, S.toCharArray(), "", 0);
        return list;

    }
    
    private void backtracking(List<String> list, char[] cs, String ans, int pos){
        if(pos == cs.length) {
            list.add(ans);
        } else {
            // è¥ä¸ä¸ºæ°å­ï¼ååä¸¤ç§æåµä¼ ç»ä¸ä¸å­é®é¢
            if(cs[pos] < '0' || cs[pos] > '9') {
                char l = cs[pos];
                backtracking(list, cs, ans + l, pos + 1);
                if (l >= 'a' && l <= 'z'){
                   l = (char)(l - 'a' + 'A'); 
                } 
                else if (l >= 'A' && l <= 'Z') {
                  l = (char)(l - 'A' + 'a');  
                }
                backtracking(list, cs, ans + l, pos + 1);
            } else {
                backtracking(list, cs, ans + cs[pos], pos+1);
            }
        }
        
    
    }
}